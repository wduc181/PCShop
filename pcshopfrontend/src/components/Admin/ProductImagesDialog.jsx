import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { uploadProductImages, getProductImages } from "@/services/productService";
import { productImageUrl, UPLOADS_PRODUCTS } from "@/config/env";

const ProductImagesDialog = ({ open, onOpenChange, productId }) => {
  const [files, setFiles] = useState([]);
  const [previews, setPreviews] = useState([]);
  const [existingImages, setExistingImages] = useState([]);
  const [uploading, setUploading] = useState(false);

  // üü¢ Fetch ·∫£nh s·∫µn c√≥ khi m·ªü dialog
  useEffect(() => {
    if (open && productId) {
      const fetchImages = async () => {
        try {
          const res = await getProductImages(productId);
          // res c√≥ th·ªÉ l√† m·∫£ng t√™n file, v√≠ d·ª• ["img1.jpg", "img2.png"]
          setExistingImages(res || []);
        } catch (error) {
          console.error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh s·∫£n ph·∫©m:", error);
        }
      };
      fetchImages();
    }
  }, [open, productId]);

  // üü¢ T·∫°o preview khi ch·ªçn file
  const handleFileChange = (e) => {
    const selected = Array.from(e.target.files);
    setFiles(selected);
    const previewsArr = selected.map((file) => URL.createObjectURL(file));
    setPreviews(previewsArr);
  };

  // üü¢ Upload ·∫£nh m·ªõi (n·∫øu c√≥)
  const handleUpload = async () => {
    try {
      setUploading(true);

      if (files.length > 0) {
        await uploadProductImages(productId, files);
        alert("Upload ·∫£nh th√†nh c√¥ng!");
      } else {
        alert("Kh√¥ng c√≥ ·∫£nh m·ªõi ‚Äî gi·ªØ nguy√™n ·∫£nh c≈©.");
      }

      onOpenChange(false);
    } catch (error) {
      console.error("L·ªói khi upload ·∫£nh:", error);
      alert("Kh√¥ng th·ªÉ upload ·∫£nh. Ki·ªÉm tra console ƒë·ªÉ bi·∫øt chi ti·∫øt.");
    } finally {
      setUploading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>·∫¢nh s·∫£n ph·∫©m</DialogTitle>
        </DialogHeader>

        {/* ·∫¢nh s·∫µn c√≥ */}
        <div>
          <h3 className="font-medium mb-2">·∫¢nh hi·ªán c√≥:</h3>
          {existingImages.length > 0 ? (
            <div className="grid grid-cols-3 gap-3">
              {existingImages.map((img, idx) => (
                <img
                  key={idx}
                  src={productImageUrl(img)}
                  alt={`product-img-${idx}`}
                  className="w-full h-32 object-cover rounded border"
                  onError={(e) => (e.target.src = "/placeholder-image.png")}
                />
              ))}
            </div>
          ) : (
            <p className="text-gray-500 text-sm">Ch∆∞a c√≥ ·∫£nh n√†o cho s·∫£n ph·∫©m n√†y.</p>
          )}
        </div>

        {/* Upload ·∫£nh m·ªõi */}
        <div className="mt-4">
          <h3 className="font-medium mb-2">Th√™m ·∫£nh m·ªõi (t√πy ch·ªçn):</h3>
          <input type="file" multiple accept="image/*" onChange={handleFileChange} />
          {previews.length > 0 && (
            <div className="grid grid-cols-3 gap-3 mt-3">
              {previews.map((src, idx) => (
                <img
                  key={idx}
                  src={src}
                  alt={`preview-${idx}`}
                  className="w-full h-32 object-cover rounded border"
                />
              ))}
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="ghost" onClick={() => onOpenChange(false)} disabled={uploading}>
            H·ªßy
          </Button>
          <Button onClick={handleUpload} disabled={uploading}>
            {uploading ? "ƒêang t·∫£i..." : "L∆∞u thay ƒë·ªïi"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ProductImagesDialog;
